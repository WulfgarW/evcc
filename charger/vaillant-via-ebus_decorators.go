package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateVaillantViaEbus(base *VaillantViaEbus, meter func() (float64, error), battery func() (float64, error), socLimiter func() (int64, error)) api.Charger {
	switch {
	case battery == nil && meter == nil && socLimiter == nil:
		return base

	case battery == nil && meter != nil && socLimiter == nil:
		return &struct {
			*VaillantViaEbus
			api.Meter
		}{
			VaillantViaEbus: base,
			Meter: &decorateVaillantViaEbusMeterImpl{
				meter: meter,
			},
		}

	case battery != nil && meter == nil && socLimiter == nil:
		return &struct {
			*VaillantViaEbus
			api.Battery
		}{
			VaillantViaEbus: base,
			Battery: &decorateVaillantViaEbusBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && meter != nil && socLimiter == nil:
		return &struct {
			*VaillantViaEbus
			api.Battery
			api.Meter
		}{
			VaillantViaEbus: base,
			Battery: &decorateVaillantViaEbusBatteryImpl{
				battery: battery,
			},
			Meter: &decorateVaillantViaEbusMeterImpl{
				meter: meter,
			},
		}

	case battery == nil && meter == nil && socLimiter != nil:
		return &struct {
			*VaillantViaEbus
			api.SocLimiter
		}{
			VaillantViaEbus: base,
			SocLimiter: &decorateVaillantViaEbusSocLimiterImpl{
				socLimiter: socLimiter,
			},
		}

	case battery == nil && meter != nil && socLimiter != nil:
		return &struct {
			*VaillantViaEbus
			api.Meter
			api.SocLimiter
		}{
			VaillantViaEbus: base,
			Meter: &decorateVaillantViaEbusMeterImpl{
				meter: meter,
			},
			SocLimiter: &decorateVaillantViaEbusSocLimiterImpl{
				socLimiter: socLimiter,
			},
		}

	case battery != nil && meter == nil && socLimiter != nil:
		return &struct {
			*VaillantViaEbus
			api.Battery
			api.SocLimiter
		}{
			VaillantViaEbus: base,
			Battery: &decorateVaillantViaEbusBatteryImpl{
				battery: battery,
			},
			SocLimiter: &decorateVaillantViaEbusSocLimiterImpl{
				socLimiter: socLimiter,
			},
		}

	case battery != nil && meter != nil && socLimiter != nil:
		return &struct {
			*VaillantViaEbus
			api.Battery
			api.Meter
			api.SocLimiter
		}{
			VaillantViaEbus: base,
			Battery: &decorateVaillantViaEbusBatteryImpl{
				battery: battery,
			},
			Meter: &decorateVaillantViaEbusMeterImpl{
				meter: meter,
			},
			SocLimiter: &decorateVaillantViaEbusSocLimiterImpl{
				socLimiter: socLimiter,
			},
		}
	}

	return nil
}

type decorateVaillantViaEbusBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateVaillantViaEbusBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateVaillantViaEbusMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateVaillantViaEbusMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateVaillantViaEbusSocLimiterImpl struct {
	socLimiter func() (int64, error)
}

func (impl *decorateVaillantViaEbusSocLimiterImpl) GetLimitSoc() (int64, error) {
	return impl.socLimiter()
}
